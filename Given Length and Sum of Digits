#include <bits/stdc++.h>
using namespace std;
 
#define fio() ios_base::sync_with_stdio(false);\
cin.tie(NULL);
 
#define md 1000000007
typedef long long int lli;
typedef float fl;
#define mem(arr,x) memset(arr,x,sizeof(arr))

typedef struct tim
            {
               lli ar[2]; 
            }ti;


lli comparator(ti p,ti q) 
{ 
    return (   p.ar[0] < q.ar[0] ) ; 
} 

lli power(lli x, lli y, lli p) 
{ 
    lli res = 1;    
    x = x % p;  
    while (y > 0) 
    { 
        if (y & 1) 
            res = (res*x) % p; 
  
        y = y>>1; 
        x = (x*x) % p; 
    } 
    return res; 
}
 
 
lli modInverse(lli n, lli p) 
{ 
    return power(n, p-2, p); 
}
 
int main()
{    
    fio();
    lli   n,s,i,j,k,l;
    cin>>n>>s;
    l=1;
    lli z;
    vector <lli> min;
    vector <lli> max;
    lli size=0,temp=s;
    
    if( (s<1 && n>1 )|| s>9*n ) {cout<<-1<<" "<<-1;return 0;}
    else if(n==1) {cout<<s<<" "<<s; return 0;}
    else 
    {    
        
        // FOR MINIMUM NUMBER
        for(i=0;i<n;i++)                     // position
        {
            for(j=0;j<10;j++)                // digits
            {
                if (i || j)
                {
                    z=s-j;                   // sum of removing that digit
                    k=n-i-1;                 // positions left to be pushed 
                    
                    if(z>=0 && z<=9*k)       // to check whether it is possible to place that digit in that position
                    {
                        min.push_back(j);
                        s-=j;                // update the sum
                        break;               // move to next position
                    }
                }
            }
        }
        
        s=temp;
        
        // FOR MAXIMUM NUMBER
        for(i=0;i<n;i++)                     // position
        {
            for(j=9;j>=0;j--)                // digits
            {
                if (i || j)
                {
                    z=s-j;                   // sum of removing that digit
                    k=n-i-1;                 // positions left to be pushed 
                    
                    if(z>=0 && z<=9*k)       // to check whether it is possible to place that digit in that position
                    {
                        max.push_back(j);
                        s-=j;                // update the sum
                        break;               // move to next position
                    }
                }
            }
        }
        
        
        // PRINT THE NUMBERS
        for(i=0;i<min.size();i++)   cout<<min[i];
        cout<<" ";
        for(i=0;i<max.size();i++)   cout<<max[i];
        
    }
    
     
}
